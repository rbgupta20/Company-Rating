from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import time

# Setup Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("detach", True)

# Initialize WebDriver and WebDriverWait
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
wait = WebDriverWait(driver, 30)

# Open CRISIL homepage once
driver.get("https://www.crisilratings.com/en/home.html")
print("CRISIL Homepage Loaded")

def search_crisil(company_name):
    try:
        print(f"\nSearching for: {company_name}")
        
        # Wait for and clear the search box
        search_box = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".input_search.ui-autocomplete-input")))
        search_box.clear()
        search_box.send_keys(company_name)
        
        # Wait for autocomplete suggestions
        suggestions = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".ui-menu-item")))

        if suggestions:
            suggestions[0].click()  # Click on the first suggestion
            print(f"Clicked on suggestion for {company_name}")
        else:
            print(f"No suggestions found for {company_name}")
            return None

        # Wait for container to load
        container = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".comp-fs-instrument-container.rating-rational-companyFactsheet")))
        print(f"Loaded page for {company_name}")

        # Get page source and parse with BeautifulSoup
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        # Extract rating
        instrument_category = soup.find("span", string="Instrument Category")
        if instrument_category:
            rating_tag = instrument_category.find_parent("li").find_next_sibling("li").find("h4")
            if rating_tag:
                long_term_rating = rating_tag.get_text(strip=True)
                print(f"{company_name} Rating: {long_term_rating}")
                return long_term_rating
        
        print(f"Rating not found for {company_name}")
        return None

    except Exception as e:
        print(f"Error searching {company_name}: {e}")
        return None

# List of 10 companies to search
company_names = [
    "Laxmi", "Tata Steel", "Reliance Industries", "Infosys", "HDFC Bank", 
    "Bharti Airtel", "ICICI Bank", "Asian Paints", "Maruti Suzuki", "L&T"
]

# Store results
ratings = {}
for company in company_names:
    rating = search_crisil(company)
    ratings[company] = rating
    time.sleep(2)  # Small delay to avoid issues

# Print final results
print("\nFinal Ratings:")
for company, rating in ratings.items():
    print(f"{company}: {rating}")

# Close the driver
driver.quit()
